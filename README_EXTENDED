- In clasa Main, in metoda main, sunt prezente operatiile facute de thread-ul
coordonator. Mai precis, in main se citesc datele din fisierul de intrare si se
creeaza task-urile specifice operatiei de Map (clasa MapTask) intr-o lista de
task-uri de Map. In constructorul task-ului de Map se trimit numele fisierului
din care face parte fragmentul, offset-ul si dimensiunea acestuia si nu
fragmentul in sine. Apoi, se creeaza thread-urile specifice worker-ilor care se
ocupa cu task-urile de Map (clasa MapWorker). Numarul de thread-uri este egal
cu numarul de worker-i.

- In clasa MapWorker, in metoda run, fiecare worker rezolva doar o parte din
task-uri, anume task-urile din lista de task-uri din Main de pe pozitiile
(id-ul task-ului + numarul de task-uri), dupa exemplul oferit in cerinta.
In run, pentru fiecare fragment se ajusteaza fragmentul prin metoda
determineFragment din clasa MapWorker si se rezolva task-ul de Map prin metoda
solveFragment din clasa MapTask. Rezultatele se retin tot in clasa MapTask.

- In clasa Main, in metoda main, se creeaza task-urile specifice operatiei de
Reduce (clasa ReduceTask) intr-o lista de task-uri de Reduce si se colecteaza
rezultatele din instantele clasei MapTask in liste aflate in clasa ReduceTask.
Apoi, se creeaza thread-urile specifice worker-ilor care se ocupa cu task-urile
de Reduce (clasa ReduceWorker). Numarul de thread-uri este egal cu numarul de
worker-i.

- In clasa ReduceWorker, in metoda run, fiecare worker rezolva o parte din
task-uri, dupa formula de mai sus, si apeleaza metoda solveCombineAndProcessing
din clasa ReduceTask pentru a rezolva fazele de combinare si procesare ale
etapei de Reduce. Rezultatele se retin tot in clasa Reduce Task.

- In clasa Main, in metoda main, se sorteaza lista de task-uri de Reduce dupa
rangul fiecarui fisier si se scriu rezultatele din instantele clasei ReduceTask
in fisieul de iesire.


